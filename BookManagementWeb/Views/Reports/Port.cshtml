@using BookManagementLib.BusinessObject;
@model BookManagementLib.BusinessObject.Report

@{
    ViewData["Title"] = "Port";
    Layout = "~/Views/Shared/_Layout"+TempData.Peek("role")+".cshtml";
    //Product product = ViewData["product"] as Product;
}

<h1>Port</h1>

<h4>Report</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Port">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Id" class="control-label"></label>
                <input asp-for="Id" class="form-control" readonly value="@ViewBag.newid" />
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ProductId" class="control-label"></label>
                <input asp-for="ProductId" class="form-control" readonly value="@ViewBag.proId" />
                <span asp-validation-for="ProductId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CompanyId" class="control-label"></label>
                <select asp-for="CompanyId" class="form-control">
                    @{
                        if (ViewData["companyList"] != null)
                        {
                            IEnumerable<Company> companies = ViewData["companyList"] as IEnumerable<Company>;

                            foreach (Company company in companies)
                            {
                                var role = company.IsReceiver ? "Receiver" : "Supplier";
                                <option value="@company.CompanyId">
                                    @company.CompanyName - @role
                                </option>
                            }
                        }

                    }
                </select>
                <span asp-validation-for="CompanyId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Port Quantity</label>
                <input asp-for="Quantity" class="form-control" id="port" type="number" min="0"/>
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UserEmail" class="control-label"></label>
                <input asp-for="UserEmail" class="form-control" readonly value="@ViewBag.userEmail" />
                <span asp-validation-for="UserEmail" class="text-danger"></span>
            </div>
            <!--
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsSupplier" id="sup" /> @Html.DisplayNameFor(model => model.IsSupplier)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsReceiver" id="rec" /> @Html.DisplayNameFor(model => model.IsReceiver)
                </label>
            </div>
            <div class="form-group">
                <label asp-for="CreatedDate" class="control-label"></label>
                <input asp-for="CreatedDate" class="form-control" />
                <span asp-validation-for="CreatedDate" class="text-danger"></span>
            </div>
            -->
            <div class="form-group">
                <input type="submit" value="Port" class="btn btn-primary" onclick="return validate()" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
<script>
    function validate() {
        let x = document.getElementById('port').value
        x = Number(x)
        if (!Number.isInteger(x)) {
            alert('Export/Import must be integer number > 0')
            
            return false
        }
        return true
    }
</script>
@{
    if (ViewBag.Message != null)
    {
        <script>
        window.onload = function () { alert("@ViewBag.Message") }
        </script>
    }
}